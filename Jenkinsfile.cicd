#!groovy

// ------------------
// Pipeline Variables
// ------------------
// Get projects/namespaces from config maps
def devProject = new File('/var/run/configs/ns/project.dev').getText('UTF-8').trim()
def testProject = new File('/var/run/configs/ns/project.test').getText('UTF-8').trim()
def prodProject = new File('/var/run/configs/ns/project.prod').getText('UTF-8').trim()
def toolsProject = new File('/var/run/configs/ns/project.tools').getText('UTF-8').trim()

// Get application config from config maps
def repoOwner = new File('/var/run/configs/jobs/repo.owner').getText('UTF-8').trim()
def appRepo = new File('/var/run/configs/jobs/repo.name').getText('UTF-8').trim()
def appName = new File('/var/run/configs/jobs/app.name').getText('UTF-8').trim()
def appDomain = new File('/var/run/configs/jobs/app.domain').getText('UTF-8').trim()

def nameSelector = "${appName}"
def label = "'app-name'=${appName}"
def rawRepoBase = "https://raw.githubusercontent.com/${repoOwner}/${appRepo}/master"
def devDomain = "${nameSelector}-${devProject}.${appDomain}"

def doEcho = true

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent any

  environment {
    // PR_NAME is the pull request identifier e.g. 'pr-5'
    PR_NAME = "${JOB_BASE_NAME}".toLowerCase()

    // SOURCE_REPO_??? references the git repo url and reference
    SOURCE_REPO_REF="pull/${CHANGE_ID}/head"
    SOURCE_REPO_URL="https://github.com/${repoOwner}/${appRepo}.git"
  }

  stages {
    stage('Debug') {
      steps {
        echo 'Print out all environment variables in this pipeline.'
        echo sh(returnStdout: true, script: 'env')

        script {
          if (doEcho) {
            openshift.logLevel(1)

            echo "Using project: ${openshift.project()}"
            echo "----- Environment -----"
            echo "   Git"
            echo "      BRANCH_NAME = ${BRANCH_NAME}"
            echo "      GIT_BRANCH = ${GIT_BRANCH}"
            echo "      GIT_COMMIT = ${GIT_COMMIT}"

            echo "   NS Config"
            echo "      devProject = ${devProject}"
            echo "      testProject = ${testProject}"
            echo "      prodProject = ${prodProject}"
            echo "      toolsProject = ${toolsProject}"

            echo "   App ConfigMap"
            echo "      repoOwner = ${repoOwner}"
            echo "      appRepo = ${appRepo}"
            echo "      appName = ${appName}"
            echo "      appDomain = ${appDomain}"

            echo "   Global Variables"
            echo "   nameSelector = ${nameSelector}"
            echo "   label = ${label}"
            echo "   devDomain = ${devDomain}"
            echo "   rawRepoBase = ${rawRepoBase}"
          }
        }
      }
    }

    stage('Frontend') {
      steps {
        timeout(10) {
          echo 'Cancelling previous builds...'
          abortAllPreviousBuildInProgress(currentBuild)
        }

        script {
          openshift.withCluster() {
            openshift.withProject(toolsProject) {
              echo 'Creating Frontend BuildConfig...'
              def bcFrontend = openshift.process('-f',
                'openshift/frontend.bc.yaml',
                "APP_REPO=${appRepo}",
                "PR_NAME=${PR_NAME}",
                "SOURCE_REPO_URL=${SOURCE_REPO_URL}",
                "SOURCE_REPO_REF=${SOURCE_REPO_REF}"
              )

              echo 'Building Frontend...'
              openshift.apply(bcFrontend).narrow('bc').cancelBuild()
              openshift.selector('bc', "${appRepo}-frontend-${PR_NAME}")
                .startBuild('-w').logs('-f')
              openshift.tag("${appRepo}-frontend:latest",
                "${appRepo}-frontend:${PR_NAME}"
              )

              echo 'Creating Static Frontend BuildConfig...'
              def bcFrontendStatic = openshift.process('-f',
                'openshift/frontend-static.bc.yaml',
                "APP_REPO=${appRepo}",
                "PR_NAME=${PR_NAME}"
              )

              echo 'Building Static Frontend...'
              openshift.apply(bcFrontendStatic).narrow('bc').cancelBuild()
              openshift.selector('bc', "${appRepo}-frontend-static-${PR_NAME}")
                .startBuild('-w').logs('-f')
              openshift.tag("${appRepo}-frontend-static:latest",
                "${appRepo}-frontend-static:${PR_NAME}"
              )
            }
          }
        }
      }
      post {
        always {
          echo 'Cleanup Frontend BuildConfigs'
          script {
            openshift.withCluster() {
              openshift.withProject(toolsProject) {
                openshift.selector('bc', "${appRepo}-frontend-${PR_NAME}").delete()
                openshift.selector('bc', "${appRepo}-frontend-static-${PR_NAME}").delete()
              }
            }
          }
        }
      }
    }

    // stage('Deploy') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(devProject) {
    //           openshift.tag("${toolsProject}/nr-get-token-frontend-static:latest", 'nr-get-token-frontend-static:dev')
    //           def dcFrontend = openshift.process('-f',
    //             'openshift/frontend-static.dc.yaml',
    //             "APP_REPO=${appRepo}",
    //             "PR_NAME=${PR_NAME}",
    //             "SOURCE_REPO_URL=${SOURCE_REPO_URL}",
    //             "SOURCE_REPO_REF=${SOURCE_REPO_REF}"
    //           )
    //           openshift.apply(dcFrontend)
    //         }
    //       }
    //     }
    //   }
    // }
  }
}
