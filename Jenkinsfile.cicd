#!groovy

// ------------------
// Pipeline Variables
// ------------------
// Get projects/namespaces from config maps
def DEV_PROJECT = new File('/var/run/configs/ns/project.dev').getText('UTF-8').trim()
def TEST_PROJECT = new File('/var/run/configs/ns/project.test').getText('UTF-8').trim()
def PROD_PROJECT = new File('/var/run/configs/ns/project.prod').getText('UTF-8').trim()
def TOOLS_PROJECT = new File('/var/run/configs/ns/project.tools').getText('UTF-8').trim()

// Get application config from config maps
def REPO_OWNER = new File('/var/run/configs/jobs/repo.owner').getText('UTF-8').trim()
def REPO_NAME = new File('/var/run/configs/jobs/repo.name').getText('UTF-8').trim()
def APP_NAME = new File('/var/run/configs/jobs/app.name').getText('UTF-8').trim()
def APP_DOMAIN = new File('/var/run/configs/jobs/app.domain').getText('UTF-8').trim()

def label = "'app-name'=${APP_NAME}"
def rawRepoBase = "https://raw.githubusercontent.com/${REPO_OWNER}/${REPO_NAME}/master"
def devDomain = "${APP_NAME}-${DEV_PROJECT}.${APP_DOMAIN}"

def DEBUG_OUTPUT = true

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent any

  environment {
    // JOB_NAME should be the pull request identifier (i.e. 'pr-5')
    JOB_NAME = "${JOB_BASE_NAME}".toLowerCase()

    // SOURCE_REPO_??? references the git repo url and reference
    SOURCE_REPO_REF="pull/${CHANGE_ID}/head"
    SOURCE_REPO_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}.git"
  }

  stages {
    stage('Debug') {
      steps {
        script {
          if (DEBUG_OUTPUT) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            echo "Using project: ${openshift.project()}"
            echo "----- Environment -----"
            echo "   Git"
            echo "      BRANCH_NAME = ${BRANCH_NAME}"
            echo "      GIT_BRANCH = ${GIT_BRANCH}"
            echo "      GIT_COMMIT = ${GIT_COMMIT}"
            echo "   NS Config"
            echo "      DEV_PROJECT = ${DEV_PROJECT}"
            echo "      TEST_PROJECT = ${TEST_PROJECT}"
            echo "      PROD_PROJECT = ${PROD_PROJECT}"
            echo "      TOOLS_PROJECT = ${TOOLS_PROJECT}"
            echo "   App ConfigMap"
            echo "      REPO_OWNER = ${REPO_OWNER}"
            echo "      REPO_NAME = ${REPO_NAME}"
            echo "      APP_NAME = ${APP_NAME}"
            echo "      APP_DOMAIN = ${APP_DOMAIN}"
            echo "   Global Variables"
            echo "   label = ${label}"
            echo "   devDomain = ${devDomain}"
            echo "   rawRepoBase = ${rawRepoBase}"

            echo 'Print out all environment variables in this pipeline.'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }

    stage('Frontend') {
      steps {
        timeout(10) {
          echo 'Cancelling previous builds...'
          abortAllPreviousBuildInProgress(currentBuild)
        }

        script {
          openshift.withCluster() {
            openshift.withProject(TOOLS_PROJECT) {
              echo 'Creating Frontend BuildConfig...'
              def bcFrontend = openshift.process('-f',
                'openshift/frontend.bc.yaml',
                "REPO_NAME=${REPO_NAME}",
                "JOB_NAME=${JOB_NAME}",
                "SOURCE_REPO_URL=${SOURCE_REPO_URL}",
                "SOURCE_REPO_REF=${SOURCE_REPO_REF}"
              )

              echo 'Building Frontend...'
              openshift.apply(bcFrontend).narrow('bc').cancelBuild()
              openshift.selector('bc', "${REPO_NAME}-frontend-${JOB_NAME}")
                .startBuild('-w').logs('-f')
              openshift.tag("${REPO_NAME}-frontend:latest",
                "${REPO_NAME}-frontend:${JOB_NAME}"
              )

              echo 'Creating Static Frontend BuildConfig...'
              def bcFrontendStatic = openshift.process('-f',
                'openshift/frontend-static.bc.yaml',
                "REPO_NAME=${REPO_NAME}",
                "JOB_NAME=${JOB_NAME}"
              )

              echo 'Building Static Frontend...'
              openshift.apply(bcFrontendStatic).narrow('bc').cancelBuild()
              openshift.selector('bc', "${REPO_NAME}-frontend-static-${JOB_NAME}")
                .startBuild('-w').logs('-f')
              openshift.tag("${REPO_NAME}-frontend-static:latest",
                "${REPO_NAME}-frontend-static:${JOB_NAME}"
              )
            }
          }
        }
      }
      post {
        always {
          echo 'Cleanup Frontend BuildConfigs'
          script {
            openshift.withCluster() {
              openshift.withProject(TOOLS_PROJECT) {
                openshift.selector('bc', "${REPO_NAME}-frontend-${JOB_NAME}").delete()
                openshift.selector('bc', "${REPO_NAME}-frontend-static-${JOB_NAME}").delete()
              }
            }
          }
        }
      }
    }

    // stage('Deploy') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(DEV_PROJECT) {
    //           openshift.tag("${TOOLS_PROJECT}/nr-get-token-frontend-static:latest", 'nr-get-token-frontend-static:dev')
    //           def dcFrontend = openshift.process('-f',
    //             'openshift/frontend-static.dc.yaml',
    //             "REPO_NAME=${REPO_NAME}",
    //             "JOB_NAME=${JOB_NAME}"
    //           )
    //           openshift.apply(dcFrontend)
    //         }
    //       }
    //     }
    //   }
    // }
  }
}
